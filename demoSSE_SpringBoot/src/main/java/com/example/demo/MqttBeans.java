package com.example.demo;

import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.integration.annotation.InboundChannelAdapter;
import org.springframework.integration.annotation.ServiceActivator;
import org.springframework.integration.channel.DirectChannel;
import org.springframework.integration.core.MessageProducer;
import org.springframework.integration.mqtt.core.DefaultMqttPahoClientFactory;
import org.springframework.integration.mqtt.core.MqttPahoClientFactory;
import org.springframework.integration.mqtt.inbound.MqttPahoMessageDrivenChannelAdapter;
import org.springframework.integration.mqtt.outbound.MqttPahoMessageHandler;
import org.springframework.integration.mqtt.support.DefaultPahoMessageConverter;
import org.springframework.integration.mqtt.support.MqttHeaders;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageChannel;
import org.springframework.messaging.MessageHandler;
import org.springframework.messaging.MessagingException;

@Configuration
public class MqttBeans {

    public MqttPahoClientFactory mqttClientFactory() {
        DefaultMqttPahoClientFactory factory = new DefaultMqttPahoClientFactory();
        MqttConnectOptions options = new MqttConnectOptions();

        options.setServerURIs(new String[] {"tcp://192.168.0.58:1883"});
        options.setUserName("Gabriele05");
        String password = "a31453";
        options.setPassword(password.toCharArray());
        options.setAutomaticReconnect(false); //TODO: change to true
        options.setCleanSession(true);
        options.setConnectionTimeout(10);
        String willMsg = "Client disconnected ungracefully";
        options.setWill("failTopic", willMsg.getBytes(), 2, true);

        factory.setConnectionOptions(options); //Mqtt connection options injected into factory

        return factory;
    }

    //Channel for subscribing
    @Bean
    public MessageChannel mqttInputChannel() {
        //A channel that invokes a single subscriber for each sent Message.
        //The invocation will occur in the sender's thread.
        return new DirectChannel(); //the connection is point 2 point
    }

    @Bean
    public MessageProducer inBound() {
        MqttPahoMessageDrivenChannelAdapter adapter = new MqttPahoMessageDrivenChannelAdapter("serverIn",
                mqttClientFactory(), "#");
        adapter.setCompletionTimeout(5000);
        //By default, the default DefaultPahoMessageConverter produces a message with a String payload
        // with the following headers: (mqtt_topic, mqtt_duplicate, mqtt_qos)
        adapter.setConverter(new DefaultPahoMessageConverter());
        adapter.setQos(2);
        adapter.setOutputChannel(mqttInputChannel());

        return adapter;
    }

    @Bean
    @ServiceActivator(inputChannel = "mqttInputChannel")
    public MessageHandler handler() {
        return new MessageHandler() {
            @Override
            public void handleMessage(Message message) throws MessagingException {
                String topic = message.getHeaders().get(MqttHeaders.RECEIVED_TOPIC).toString();
                if (topic.equals("newentry")) {
                    System.out.println("New Entry Topic Event");
                }
                System.out.println(message.getPayload());
                String msg = message.getPayload().toString();
                message.getHeaders().get(MqttHeaders.RECEIVED_RETAINED);
               // System.out.println(msg);
                //NewsSSEController nssec = new NewsSSEController();
                NewsSSEController.dispatchEventsToClients(topic, msg, "gabri05");
            }
        };
    }

    /*
    //Channel for publishing
    @Bean
    public MessageChannel mqttOutboundChannel() {
        return new DirectChannel();
    }

    @Bean
    @ServiceActivator(inputChannel = "mqttOutboundChannel")
    public MessageHandler mqttOutbound() {
        MqttPahoMessageHandler messageHandler = new MqttPahoMessageHandler("serverOut", mqttClientFactory());

        //When async and async-events are both true, an MqttMessageSentEvent is emitted (See Events).
        //It contains the message, the topic, the messageId generated by the client library, the clientId,
        // and the clientInstance (incremented each time the client is connected).
        messageHandler.setAsync(true); //to let always listen the channel
        messageHandler.setAsyncEvents(true);
        messageHandler.setDefaultTopic("#");
        return messageHandler;
    }*/



}
